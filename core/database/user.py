from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)

from core.database.requests import set_user, del_task, set_task
# from middlewares import BaseMiddleware

import core.keyboards.keyboards as kb
from core.database.requests import get_tasks

user = Router()

# user.message.middleware(BaseMiddleware())

@user.message(CommandStart())
async def cmd_start(message: Message):
    await set_user(message.from_user.id)
    # await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –≤ —á–∞—Ç',
    #                      reply_markup=await kb.tasks(message.from_user.id))
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
                         reply_markup=kb.create_main_menu())


@user.message(lambda msg: msg.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
async def tasks(message: Message):
    tasks = await get_tasks(message.from_user.id)
    if not tasks:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.", reply_markup=kb.create_main_menu())
        return
    keyboard = InlineKeyboardBuilder()
    for task in tasks:
        await message.answer(
            f"üìå {task.task}",
            reply_markup=kb.create_task_keyboard(task.id)
        )


# @user.callback_query(F.data.startswith('task_'))
# async def delete_task(callback:CallbackQuery):
#     await del_task(callback.data.split('_')[1])
#     await callback.answer('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
#     await callback.message.delete()
#     await callback.message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –≤ —á–∞—Ç',
#                          reply_markup=await kb.tasks(callback.from_user.id))
    


# @user.message("Pass")
# async def add_task(message: Message):
#     if len(message.text) > 100:
#         await message.answer('–ó–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è')
#         return
#     await set_task(message.from_user.id, message.text)
#     await message.answer('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
#     await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –≤ —á–∞—Ç',
#                          reply_markup=await kb.tasks(message.from_user.id))
    