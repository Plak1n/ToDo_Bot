from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from core.database.requests import set_user, add_task, del_task, task_count
from core.database.requests import get_tasks
from core.utils.states_form import ToDoStates, STATUS_OPTIONS
# from middlewares import BaseMiddleware
import core.keyboards.keyboards as kb

from pytz import timezone
from datetime import datetime


user = Router()

# user.message.middleware(BaseMiddleware())

@user.message(CommandStart())
async def cmd_start(message: Message):
    await set_user(message.from_user.id)
    # await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –≤ —á–∞—Ç',
    #                      reply_markup=await kb.tasks(message.from_user.id))
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
                         reply_markup=kb.create_main_menu())


@user.message(lambda msg: msg.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
async def tasks(message: Message):
    tasks = await get_tasks(message.from_user.id)
    if not tasks:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.", reply_markup=kb.create_main_menu())
        return
    keyboard = InlineKeyboardBuilder()
    for task in tasks:
        await message.answer(
            f"{task.id} {task.task}",
            reply_markup=kb.create_task_keyboard(task.id)
        )


@user.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def set_task(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(ToDoStates.adding_task)


@user.message(ToDoStates.adding_task)
async def process_add_task(message: Message, state: FSMContext):
    
    if not message.from_user.id:
        await message.answer("‚ùå –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", reply_markup=kb.create_main_menu())
        await state.clear()
        return

    task = {
        "task": message.text,
        "status": STATUS_OPTIONS["not_started"],
        "timestamp": datetime.now(timezone('Europe/Moscow')).replace(microsecond=0)
    }
    await add_task(message.from_user.id, task)
    
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['task']}", reply_markup=kb.create_main_menu())
    await state.clear()


@user.message(lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(ToDoStates.deleting_task)


@user.message(ToDoStates.deleting_task)
async def process_delete_task(message: Message, state: FSMContext):
    
    if not message.from_user.id:
        await message.answer("‚ùå –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", reply_markup=kb.create_main_menu())
        await state.clear()
        return

    try:
        task_id = int(message.text.strip())
        if 0 <= task_id <= int(await task_count(message.from_user.id)):
            await del_task(task_id)
            await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=kb.create_main_menu())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.create_main_menu())
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=kb.create_main_menu())
    await state.clear()
